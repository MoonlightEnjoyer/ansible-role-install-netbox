---
#PostgreSQL section
- name: Install the PostgreSQL repository RPM
  dnf:
    name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm
    disable_gpg_check: true
    state: present
- name: Disable the built-in PostgreSQL module
  command: dnf -qy module disable postgresql
- name: Install PostgreSQL
  dnf:
    name: postgresql17-server
    state: present
    update_cache: true
- name: Initialize the database
  command: "/usr/pgsql-17/bin/postgresql-17-setup initdb"
  ignore_errors: true
- name: Enable and start postgresql
  systemd_service:
    name: postgresql-17
    state: restarted
    enabled: true
- name: Enable crb repository (needed to install perl-IPC run for postgresql-devel)
  command: dnf config-manager --set-enabled crb
- name: Install community.postgresql.postgresql_db requirements
  dnf:
    name:
      - perl-IPC-Run
      - python3.12-pip
      - python3.12-devel
      - postgresql17-devel
      - python3.12-psycopg2
- name: Create psql user netbox
  community.postgresql.postgresql_user:
    name: netbox
    password: "{{ postgres_password }}"
  vars:
    ansible_python_interpreter: /usr/bin/python3.12
  become: true
  become_user: postgres
- name: Create netbox database
  community.postgresql.postgresql_db:
    name: netbox
    owner: netbox
  vars:
    ansible_python_interpreter: /usr/bin/python3.12
  become: true
  become_user: postgres

#---
#Redis section
- name: Install Redis
  dnf:
    name: redis
- name: Restart and enable Redis
  systemd_service:
    name: redis
    state: restarted
    enabled: true

#---
#Netbox section
- name: Install required packages
  dnf:
    name:
      - python3.12
      - python3.12-pip
      - python3.12-devel
      - gcc
      - gcc-c++
      - make
      - libxml2-devel
      - libxslt-devel
      - libffi-devel
      - libpq5-devel
      - openssl-devel
      - zlib-devel
- name: Download and unpack netbox release archive
  unarchive:
    src: https://github.com/netbox-community/netbox/archive/refs/tags/v4.3.2.tar.gz
    dest: /opt
    remote_src: yes
- name: Create netbox symlink
  file:
    src: /opt/netbox-4.3.2/
    dest: /opt/netbox
    state: link
- name: Create netbox group
  group:
    name: netbox
    state: present
    system: true
- name: Create netbox user
  user:
    name: netbox
    group: netbox
    system: true
- name: Change some netbox directories ownership
  file:
    path:
      - /opt/netbox/netbox/media/
      - /opt/netbox/netbox/reports/
      - /opt/netbox/netbox/scripts/
    recurse: yes
    owner: netbox
    group: netbox
#- name: Generate secret key
#  command: python3 /opt/netbox/netbox/generate_secret_key.py
#  register: secret_key
- name: Copy configuration.py template
  template:
    src: templates/configuration.py.j2
    dest: /opt/netbox/netbox/netbox/configuration.py
- name: Run the upgrade script
  command: /opt/netbox/upgrade.sh
  environment:
    PYTHON: /usr/bin/python3.12
- name: Schedule the housekeeping task
  file:
    src: /opt/netbox/contrib/netbox-housekeeping.sh
    dest: /etc/cron.daily/netbox-housekeeping
    state: link


#---
#Gunicorn section
- name: Copy gunicorn configuration file
  copy:
    src: /opt/netbox/contrib/gunicorn.py
    dest: /opt/netbox/gunicorn.py
    remote_src: true
- name: Create list of netbox unit files
  find:
    paths: /opt/netbox/contrib/
    patterns: '*.service'
  register: netbox_unit_files
- name: Copy unit files to systemd directory
  copy:
    src: "{{ item.path }}"
    dest: "/etc/systemd/system/"
    remote_src: true
  with_items: "{{ netbox_unit_files.files }}"
- name: Start and enable netbox service
  systemd_service:
    name: netbox
    state: restarted
    enabled: true
    daemon_reload: true
- name: Start and enable netbox-rq service
  systemd_service:
    name: netbox-rq
    state: restarted
    enabled: true
    daemon_reload: true

#---
#Self signed certificate section
- name: Install python cryptography library
  pip:
    name: cryptography

- name: Create certificate directories
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - /etc/ssl/ca/
    - /etc/ssl/private/

- name: Create CA private key
  community.crypto.openssl_privatekey:
    path: /etc/ssl/ca/ca-cert.key
- name: Create certificate signing request (CSR) for CA certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: /etc/ssl/ca/ca-cert.key
    common_name: Ansible-Netbox CA
    use_common_name_for_san: false
    basic_constraints:
      - 'CA:TRUE'
    basic_constraints_critical: true
    key_usage:
      - keyCertSign
    key_usage_critical: true
  register: ca_csr
- name: Create self-signed CA certificate from CSR
  community.crypto.x509_certificate:
    path: /etc/ssl/ca/ca-cert.pem
    csr_content: "{{ ca_csr.csr }}"
    privatekey_path: /etc/ssl/ca/ca-cert.key
    provider: selfsigned

- name: Create private key for new certificate
  community.crypto.openssl_privatekey:
    path: /etc/ssl/private/netbox.key

- name: Create certificate signing request (CSR) for new certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: /etc/ssl/private/netbox.key
    common_name: netbox.music-share.ru
    subject_alt_name:
      - "IP:192.168.56.4"
  register: csr

- name: Sign certificate with our CA
  community.crypto.x509_certificate_pipe:
    csr_content: "{{ csr.csr }}"
    provider: ownca
    ownca_path: /etc/ssl/ca/ca-cert.pem
    ownca_privatekey_path: /etc/ssl/ca/ca-cert.key
    ownca_not_after: +365d  # valid for one year
    ownca_not_before: "-1d"  # valid since yesterday
  register: certificate

- name: Write certificate file
  copy:
    dest: /etc/ssl/certs/netbox.crt
    content: "{{ certificate.certificate }}"

#---
#Nginx section
- name: Install nginx
  dnf:
    name: nginx
    state: present
- name: Copy netbox nginx configuration
  copy:
    src: /opt/netbox/contrib/nginx.conf
    dest: /etc/nginx/conf.d/netbox.conf
    remote_src: true
- name: Remove default nginx config
  file:
    path: /etc/nginx/conf.d/default.conf
    state: absent
- name: Remove redundant config part 0
  replace:
    path: /etc/nginx/nginx.conf
    after: 'server'
    regexp: '^(.+)'
    replace: ''
- name: Remove redundant config part 1
  replace:
    path: /etc/nginx/nginx.conf
    regexp: 'server'
    replace: '}'
- name: Enable and restart nginx
  systemd_service:
    name: nginx
    state: restarted
    enabled: true
  become: true
- name: Allow HTTP network connections with SELinux
  command: setsebool -P httpd_can_network_connect 1


